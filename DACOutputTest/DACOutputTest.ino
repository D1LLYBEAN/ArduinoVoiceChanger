#include <Wire.h>
#include <Adafruit_MCP4725.h>
#include <TimerOne.h>

Adafruit_MCP4725 dac;

#define chunk 800
#define multSlow 2

uint16_t voiceVec[chunk] =
{
  259,276,303,339,405,446,445,439,389,319,278,265,280,311,345,367,381,370,362,372,360,347,340,318,295,289,304,333,381,412,420,420,376,333,313,310,327,345,377,387,377,370,362,359,339,330,325,306,302,309,326,332,334,333,308,284,270,267,271,280,295,298,294,292,292,285,275,272,264,271,297,342,412,447,457,449,386,315,276,266,279,313,352,371,379,370,367,374,363,356,347,318,293,288,309,344,383,418,434,408,368,337,310,301,323,359,379,391,398,387,371,351,343,327,307,307,312,320,331,347,351,328,305,288,270,262,271,287,294,297,300,300,291,282,279,271,258,267,295,324,390,446,455,455,409,337,288,265,270,300,336,363,380,376,366,372,365,353,348,326,298,287,295,330,370,399,430,423,377,342,317,306,317,349,378,385,384,376,364,352,341,339,324,308,308,310,318,331,339,331,312,292,276,264,265,280,291,299,302,302,294,282,280,271,259,270,295,330,395,446,462,454,403,334,288,266,275,306,341,365,381,378,367,373,367,358,351,327,301,289,299,336,380,408,432,420,374,337,313,304,321,351,379,394,394,384,373,358,344,333,316,306,306,316,332,344,349,335,312,288,274,267,269,284,295,299,302,299,292,288,283,281,270,269,288,311,374,439,455,460,430,356,296,269,270,293,330,365,382,378,367,369,367,356,354,338,306,289,294,321,362,397,426,425,386,347,320,307,315,344,375,386,385,375,365,354,341,337,324,309,305,309,319,328,337,333,313,294,276,266,261,275,291,292,294,295,291,277,275,275,263,267,289,322,386,436,451,452,409,336,289,268,267,298,337,363,378,373,366,369,362,354,350,328,300,290,297,321,364,406,427,421,389,350,314,296,304,334,366,387,403,402,384,364,344,327,310,301,304,314,329,342,351,343,319,294,274,261,263,274,293,299,298,299,294,285,278,277,269,263,280,303,349,417,450,459,446,383,314,276,264,279,319,354,373,384,373,367,374,364,356,347,321,298,293,310,349,386,419,434,407,366,335,316,316,338,367,382,385,378,373,366,353,347,337,319,307,308,317,326,339,341,325,303,282,269,266,274,287,292,294,289,289,288,282,280,271,267,283,304,363,426,446,459,432,359,299,267,265,289,328,362,377,376,364,366,366,357,354,337,308,290,289,312,355,394,421,429,398,352,323,305,311,333,357,378,383,382,380,372,358,341,327,307,298,303,317,336,345,342,324,297,279,268,270,277,287,296,293,291,292,291,284,274,268,267,280,303,362,425,442,454,440,368,304,274,271,286,319,359,376,377,367,369,371,354,352,345,314,294,294,319,354,389,423,428,393,353,327,309,308,338,373,386,395,394,383,360,340,336,324,310,310,316,324,330,343,341,321,299,284,272,265,276,291,296,299,299,300,287,278,273,265,268,287,323,384,435,452,458,418,341,292,270,269,295,333,366,379,373,369,373,362,353,354,330,301,290,300,328,363,399,426,416,379,350,327,311,317,342,358,366,374,383,381,371,359,345,318,298,297,306,318,334,344,336,312,293,281,270,268,279,287,289,291,295,294,286,282,275,263,269,292,328,398,444,453,449,395,323,281,266,279,312,347,368,381,371,363,371,364,355,350,325,299,290,305,339,376,407,425,408,368,339,318,306,315,345,373,382,396,398,380,356,339,326,306,300,312,324,334,342,348,333,308,291,278,267,266,279,294,297,302,305,299,285,279,275,265,270,295,326,386,437,451,448,408,341,295,273,276,304,337,364,378,377,369,370,365,355,347,328,303,294,305,333,366,401,419,408,379,350,325,312,319,346,367,378,391,391,377,359,348,333,311,305,311,318,328,338
};

uint16_t voiceIn = 0;
uint16_t voiceOut = 0;
uint16_t sampleCount = 0;

void setup(void)
{
  Timer1.initialize(100); // timer period (in microseconds)
  Timer1.attachInterrupt(callback); // blinkLED to run at 9000 Hz
  Serial.begin(9600);

  dac.begin(0x62);
}

void callback()
{
  voiceIn = (voiceIn + 1) % chunk;

  //voiceOut = (voiceIn - 1) % chunk; // ~144.93 Hz
  voiceOut = (voiceOut + (voiceIn % multSlow)) % chunk; // ~73.260 Hz @ multSlow = 2
}

void loop(void)
{  
  dac.setVoltage(voiceVec[voiceOut], false);
}
